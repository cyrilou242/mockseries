(self.webpackChunkdoc=self.webpackChunkdoc||[]).push([[4537],{3905:function(e,t,n){"use strict";n.d(t,{Zo:function(){return c},kt:function(){return d}});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var l=r.createContext({}),u=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},c=function(e){var t=u(e.components);return r.createElement(l.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},p=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,l=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),p=u(n),d=a,f=p["".concat(l,".").concat(d)]||p[d]||m[d]||i;return n?r.createElement(f,o(o({ref:t},c),{},{components:n})):r.createElement(f,o({ref:t},c))}));function d(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,o=new Array(i);o[0]=p;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:a,o[1]=s;for(var u=2;u<i;u++)o[u]=n[u];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}p.displayName="MDXCreateElement"},545:function(e,t,n){"use strict";n.r(t),n.d(t,{frontMatter:function(){return s},metadata:function(){return l},toc:function(){return u},default:function(){return m}});var r=n(2122),a=n(9756),i=(n(7294),n(3905)),o=["components"],s={sidebar_label:"dates",title:"mockseries.utils.dates"},l={unversionedId:"API Documentation/mockseries/utils/dates",id:"API Documentation/mockseries/utils/dates",isDocsHomePage:!1,title:"mockseries.utils.dates",description:"datetime\\_range",source:"@site/docs/API Documentation/mockseries/utils/dates.md",sourceDirName:"API Documentation/mockseries/utils",slug:"/API Documentation/mockseries/utils/dates",permalink:"/docs/API Documentation/mockseries/utils/dates",editUrl:"https://github.com/cyrilou242/mockseries/edit/master/website/docs/API Documentation/mockseries/utils/dates.md",version:"current",sidebar_label:"dates",frontMatter:{sidebar_label:"dates",title:"mockseries.utils.dates"},sidebar:"tutorialSidebar",previous:{title:"mockseries.trend.linear_trend",permalink:"/docs/API Documentation/mockseries/trend/linear_trend"},next:{title:"mockseries.utils.plot",permalink:"/docs/API Documentation/mockseries/utils/plot"}},u=[],c={toc:u};function m(e){var t=e.components,n=(0,a.Z)(e,o);return(0,i.kt)("wrapper",(0,r.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h4",{id:"datetime_range"},"datetime","_","range"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"datetime_range(granularity: timedelta, start_time: datetime, end_time: Optional[datetime] = None, num_points: Optional[int] = None) -> List[datetime]\n")),(0,i.kt)("p",null,"Generates a range of datetimes with a given granularity."),(0,i.kt)("p",null,"You can either use ",(0,i.kt)("inlineCode",{parentName:"p"},"end_time")," or ",(0,i.kt)("inlineCode",{parentName:"p"},"num_points")," to set the end of the range."),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Arguments"),":"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"granularity")," - Frequency of the data points. Eg: 1 day, 2 hours."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"start_time")," - Start of the range."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"end_time")," - End of the range."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"num_points")," - Number of data points to generate.")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Returns"),":"),(0,i.kt)("p",null,"  A list of datetimes."),(0,i.kt)("h4",{id:"delta_from_start"},"delta","_","from","_","start"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"delta_from_start(time_points: np.ndarray) -> np.ndarray\n")),(0,i.kt)("p",null,"Returns the timedeltas to the first element of the array."))}m.isMDXComponent=!0}}]);