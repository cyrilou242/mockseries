"use strict";(self.webpackChunkdoc=self.webpackChunkdoc||[]).push([[4921],{3905:function(e,t,a){a.d(t,{Zo:function(){return y},kt:function(){return u}});var n=a(7294);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function i(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function s(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?i(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):i(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function o(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},i=Object.keys(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var l=n.createContext({}),c=function(e){var t=n.useContext(l),a=t;return e&&(a="function"==typeof e?e(t):s(s({},t),e)),a},y=function(e){var t=c(e.components);return n.createElement(l.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},m=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,i=e.originalType,l=e.parentName,y=o(e,["components","mdxType","originalType","parentName"]),m=c(a),u=r,d=m["".concat(l,".").concat(u)]||m[u]||p[u]||i;return a?n.createElement(d,s(s({ref:t},y),{},{components:a})):n.createElement(d,s({ref:t},y))}));function u(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=a.length,s=new Array(i);s[0]=m;var o={};for(var l in t)hasOwnProperty.call(t,l)&&(o[l]=t[l]);o.originalType=e,o.mdxType="string"==typeof e?e:r,s[1]=o;for(var c=2;c<i;c++)s[c]=a[c];return n.createElement.apply(null,s)}return n.createElement.apply(null,a)}m.displayName="MDXCreateElement"},7274:function(e,t,a){a.r(t),a.d(t,{frontMatter:function(){return o},metadata:function(){return l},toc:function(){return c},default:function(){return p}});var n=a(7462),r=a(3366),i=(a(7294),a(3905)),s=["components"],o={sidebar_label:"yearly_seasonality",title:"mockseries.seasonality.yearly_seasonality"},l={unversionedId:"API Reference/mockseries/seasonality/yearly_seasonality",id:"API Reference/mockseries/seasonality/yearly_seasonality",isDocsHomePage:!1,title:"mockseries.seasonality.yearly_seasonality",description:"YearlySeasonality",source:"@site/docs/API Reference/mockseries/seasonality/yearly_seasonality.md",sourceDirName:"API Reference/mockseries/seasonality",slug:"/API Reference/mockseries/seasonality/yearly_seasonality",permalink:"/docs/API Reference/mockseries/seasonality/yearly_seasonality",editUrl:"https://github.com/cyrilou242/mockseries/edit/master/website/docs/API Reference/mockseries/seasonality/yearly_seasonality.md",version:"current",sidebar_label:"yearly_seasonality",frontMatter:{sidebar_label:"yearly_seasonality",title:"mockseries.seasonality.yearly_seasonality"},sidebar:"tutorialSidebar",previous:{title:"mockseries.seasonality.weekly_seasonality",permalink:"/docs/API Reference/mockseries/seasonality/weekly_seasonality"},next:{title:"mockseries.signal.composed_signal",permalink:"/docs/API Reference/mockseries/signal/composed_signal"}},c=[{value:"YearlySeasonality",id:"yearlyseasonality",children:[]}],y={toc:c};function p(e){var t=e.components,a=(0,r.Z)(e,s);return(0,i.kt)("wrapper",(0,n.Z)({},y,a,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h2",{id:"yearlyseasonality"},"YearlySeasonality"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"class YearlySeasonality(PeriodSeasonality)\n")),(0,i.kt)("p",null,"Realistic yearly seasonality from a set of time/value constraints."),(0,i.kt)("p",null,"Finest granularity for constraints and generation is microseconds.\nThe interpolation method is ",(0,i.kt)("a",{parentName:"p",href:"https://docs.scipy.org/doc/scipy/reference/generated/scipy.interpolate.PchipInterpolator.html#scipy-interpolate-pchipinterpolator"},"PCHIP"),"."),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Arguments"),":"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"time_value_constraints")," - A dict of ",(0,i.kt)("inlineCode",{parentName:"li"},"{time: value}")," constraints. The curve will pass through these points.\nPass time as a timedelta between ",(0,i.kt)("inlineCode",{parentName:"li"},"0 days 00:00:00 and "),"364 days 23:59:59",(0,i.kt)("inlineCode",{parentName:"li"},". For instance, "),"{timedelta(days=55): 4.2}`\nIf generation is performed on a leap year, February 29 is approximated as the mean between February 28 and March 1.\nIe timdedelta(days=59) always corresponds to March 1 for fitting."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"utc_offset")," - The offset from UTC of the time. For instance, if you give constraints with GMT-8 times in mind, pass ",(0,i.kt)("inlineCode",{parentName:"li"},"timedelta(hours=-8)"),".\nDefault behavior considers times are passed as UTC."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"normalize")," - transform constraints to a multiplication factor for easy use in multiplicative interactions. Eg: ","[5, 10, 15]"," --\x3e ","[0.5, 1, 1.5]",".")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Examples"),":"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"from datetime import timedelta, datetime\nfrom mockseries.seasonality import YearlySeasonality\n\ntimeseries = YearlySeasonality({timedelta(days=15): 0.7, timedelta(days=45): 0.8, timedelta(days=75): 0.9, timedelta(days=105): 1.1, timedelta(days=200): 1.4, timedelta(days=340): 2})\ntimeseries.preview_year(num_years=4)\n")))}p.isMDXComponent=!0}}]);