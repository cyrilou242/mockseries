"use strict";(self.webpackChunkdoc=self.webpackChunkdoc||[]).push([[462],{3905:function(e,t,n){n.d(t,{Zo:function(){return y},kt:function(){return u}});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=a.createContext({}),c=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},y=function(e){var t=c(e.components);return a.createElement(l.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,l=e.parentName,y=o(e,["components","mdxType","originalType","parentName"]),m=c(n),u=r,d=m["".concat(l,".").concat(u)]||m[u]||p[u]||i;return n?a.createElement(d,s(s({ref:t},y),{},{components:n})):a.createElement(d,s({ref:t},y))}));function u(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,s=new Array(i);s[0]=m;var o={};for(var l in t)hasOwnProperty.call(t,l)&&(o[l]=t[l]);o.originalType=e,o.mdxType="string"==typeof e?e:r,s[1]=o;for(var c=2;c<i;c++)s[c]=n[c];return a.createElement.apply(null,s)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},7431:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return o},metadata:function(){return l},toc:function(){return c},default:function(){return p}});var a=n(7462),r=n(3366),i=(n(7294),n(3905)),s=["components"],o={sidebar_label:"weekly_seasonality",title:"mockseries.seasonality.weekly_seasonality"},l={unversionedId:"API Reference/mockseries/seasonality/weekly_seasonality",id:"API Reference/mockseries/seasonality/weekly_seasonality",isDocsHomePage:!1,title:"mockseries.seasonality.weekly_seasonality",description:"WeeklySeasonality",source:"@site/docs/API Reference/mockseries/seasonality/weekly_seasonality.md",sourceDirName:"API Reference/mockseries/seasonality",slug:"/API Reference/mockseries/seasonality/weekly_seasonality",permalink:"/docs/API Reference/mockseries/seasonality/weekly_seasonality",editUrl:"https://github.com/cyrilou242/mockseries/edit/master/website/docs/API Reference/mockseries/seasonality/weekly_seasonality.md",version:"current",sidebar_label:"weekly_seasonality",frontMatter:{sidebar_label:"weekly_seasonality",title:"mockseries.seasonality.weekly_seasonality"},sidebar:"tutorialSidebar",previous:{title:"mockseries.seasonality.sinusoidal_seasonality",permalink:"/docs/API Reference/mockseries/seasonality/sinusoidal_seasonality"},next:{title:"mockseries.seasonality.yearly_seasonality",permalink:"/docs/API Reference/mockseries/seasonality/yearly_seasonality"}},c=[{value:"WeeklySeasonality",id:"weeklyseasonality",children:[]}],y={toc:c};function p(e){var t=e.components,n=(0,r.Z)(e,s);return(0,i.kt)("wrapper",(0,a.Z)({},y,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h2",{id:"weeklyseasonality"},"WeeklySeasonality"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"class WeeklySeasonality(PeriodSeasonality)\n")),(0,i.kt)("p",null,"Realistic weekly seasonality from a set of time/value constraints."),(0,i.kt)("p",null,"Finest granularity for constraints and generation is microseconds.\nThe interpolation method is ",(0,i.kt)("a",{parentName:"p",href:"https://docs.scipy.org/doc/scipy/reference/generated/scipy.interpolate.PchipInterpolator.html#scipy-interpolate-pchipinterpolator"},"PCHIP"),"."),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Arguments"),":"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"time_value_constraints")," - A dict of ",(0,i.kt)("inlineCode",{parentName:"li"},"{time: value}")," constraints. The curve will pass through these points.\nPass time as a timedelta between ",(0,i.kt)("inlineCode",{parentName:"li"},"0 days 00:00:00 and "),"6 days 23:59:59",(0,i.kt)("inlineCode",{parentName:"li"},". For instance, "),"{timedelta(days=3): 4.2}`\nDay 0 corresponds to Monday, day 6 corresponds to Sunday."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"utc_offset")," - The offset from UTC of the time. For instance, if you give constraints with GMT-8 times in mind, pass ",(0,i.kt)("inlineCode",{parentName:"li"},"timedelta(hours=-8)"),".\nDefault behavior considers times are passed as UTC."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"normalize")," - transform constraints to a multiplication factor for easy use in multiplicative interactions. Eg: ","[5, 10, 15]"," --\x3e ","[0.5, 1, 1.5]",".")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Examples"),":"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"from datetime import timedelta, datetime\nfrom mockseries.seasonality import WeeklySeasonality\n\ntimeseries = WeeklySeasonality({timedelta(days=0): 1., timedelta(days=2): 1.8, timedelta(days=4): 1.1, timedelta(days=5): 2.5, timedelta(days=6): 0.6})\ntimeseries.preview_week(num_weeks=3)\n")))}p.isMDXComponent=!0}}]);