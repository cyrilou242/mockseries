"use strict";(self.webpackChunkdoc=self.webpackChunkdoc||[]).push([[7693],{3905:function(e,t,a){a.d(t,{Zo:function(){return p},kt:function(){return d}});var n=a(7294);function i(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function s(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function r(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?s(Object(a),!0).forEach((function(t){i(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):s(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function l(e,t){if(null==e)return{};var a,n,i=function(e,t){if(null==e)return{};var a,n,i={},s=Object.keys(e);for(n=0;n<s.length;n++)a=s[n],t.indexOf(a)>=0||(i[a]=e[a]);return i}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(n=0;n<s.length;n++)a=s[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(i[a]=e[a])}return i}var o=n.createContext({}),m=function(e){var t=n.useContext(o),a=t;return e&&(a="function"==typeof e?e(t):r(r({},t),e)),a},p=function(e){var t=m(e.components);return n.createElement(o.Provider,{value:t},e.children)},y={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},u=n.forwardRef((function(e,t){var a=e.components,i=e.mdxType,s=e.originalType,o=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),u=m(a),d=i,c=u["".concat(o,".").concat(d)]||u[d]||y[d]||s;return a?n.createElement(c,r(r({ref:t},p),{},{components:a})):n.createElement(c,r({ref:t},p))}));function d(e,t){var a=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var s=a.length,r=new Array(s);r[0]=u;var l={};for(var o in t)hasOwnProperty.call(t,o)&&(l[o]=t[o]);l.originalType=e,l.mdxType="string"==typeof e?e:i,r[1]=l;for(var m=2;m<s;m++)r[m]=a[m];return n.createElement.apply(null,r)}return n.createElement.apply(null,a)}u.displayName="MDXCreateElement"},8077:function(e,t,a){a.r(t),a.d(t,{frontMatter:function(){return l},metadata:function(){return o},toc:function(){return m},default:function(){return y}});var n=a(7462),i=a(3366),s=(a(7294),a(3905)),r=["components"],l={sidebar_position:2},o={unversionedId:"tutorials/seasonality-daily-weekly-yearly",id:"tutorials/seasonality-daily-weekly-yearly",isDocsHomePage:!1,title:"Daily, Weekly and Yearly seasonalities.",description:"A lot of signals have calendar based seasonalities:",source:"@site/docs/tutorials/seasonality-daily-weekly-yearly.md",sourceDirName:"tutorials",slug:"/tutorials/seasonality-daily-weekly-yearly",permalink:"/docs/tutorials/seasonality-daily-weekly-yearly",editUrl:"https://github.com/cyrilou242/mockseries/edit/master/website/docs/tutorials/seasonality-daily-weekly-yearly.md",version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2},sidebar:"tutorialSidebar",previous:{title:"Combining signals",permalink:"/docs/tutorials/interaction-scalar-operations"},next:{title:"mockseries.interaction.additive_interaction",permalink:"/docs/API Reference/mockseries/interaction/additive_interaction"}},m=[{value:"Daily seasonality",id:"daily-seasonality",children:[]},{value:"Weekly seasonality - Managing timezone",id:"weekly-seasonality---managing-timezone",children:[]},{value:"Yearly seasonality - Normalizing",id:"yearly-seasonality---normalizing",children:[]}],p={toc:m};function y(e){var t=e.components,l=(0,i.Z)(e,r);return(0,s.kt)("wrapper",(0,n.Z)({},p,l,{components:t,mdxType:"MDXLayout"}),(0,s.kt)("p",null,"A lot of signals have calendar based seasonalities:"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},"city noise levels have a ",(0,s.kt)("strong",{parentName:"li"},"daily seasonality"),": it's busy when people are out and calm at night."),(0,s.kt)("li",{parentName:"ul"},"sales have a ",(0,s.kt)("strong",{parentName:"li"},"weekly seasonality"),": people buy more on Wednesdays and Saturdays."),(0,s.kt)("li",{parentName:"ul"},"and for ",(0,s.kt)("strong",{parentName:"li"},"yearly seasonality")," ...you guessed it, seasons.")),(0,s.kt)("p",null,"These seasonalities are hard to define with a simple mathematical function,\nbut most of the time you have a rough idea of their shape.\nLet's see how you can create them with ",(0,s.kt)("strong",{parentName:"p"},"mockseries")," !"),(0,s.kt)("h2",{id:"daily-seasonality"},"Daily seasonality"),(0,s.kt)("p",null,"Let's look at the ",(0,s.kt)("a",{parentName:"p",href:"https://www.researchgate.net/figure/Illustration-of-the-hourly-energy-consumption-of-different-appliances-per-household_fig1_290105581"},"hourly energy consumption per household"),".\nIt's definitely cyclic: you consume less when you're sleeping, and there are pics corresponding to breakfast, lunch and dinner: things that happen everyday.\n",(0,s.kt)("img",{alt:"Hourly energy consumption per household",src:a(5428).Z}),"\nTo generate a similar signal in ",(0,s.kt)("strong",{parentName:"p"},"mockseries"),", we just need to identify a few ",(0,s.kt)("inlineCode",{parentName:"p"},"constraint")," points. A ",(0,s.kt)("inlineCode",{parentName:"p"},"constraint")," is a time and its associated value.",(0,s.kt)("br",{parentName:"p"}),"\n","An algorithm will generate a realistic curve that respects the constraints.",(0,s.kt)("br",{parentName:"p"}),"\n","Times are expressed as ",(0,s.kt)("inlineCode",{parentName:"p"},"timedelta"),"s from the start of the period, so for ",(0,s.kt)("a",{parentName:"p",href:"../API%20Reference/mockseries/seasonality/daily_seasonality"},"DailySeasonality"),", timedeltas should be between ",(0,s.kt)("inlineCode",{parentName:"p"},"0h 0min 0 sec")," and ",(0,s.kt)("inlineCode",{parentName:"p"},"23h 59min 59.999sec"),".   "),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-python"},'# plotting utilities for the whole tutorial \nimport matplotlib.pyplot as plt\nDEFAULT_SIZE_PLOT = plt.rcParamsDefault["figure.figsize"]\nLARGE_SIZE_PLOT = (20,7)\n\nfrom datetime import datetime, timedelta\nfrom mockseries.seasonality import DailySeasonality\n\n# create the daily seasonality signal \nconstraints =  {\n    timedelta(hours=0): 375,\n    timedelta(hours=4): 250,\n    timedelta(hours=8): 500,\n    timedelta(hours=10, minutes=50): 460,\n    timedelta(hours=12): 500,\n    timedelta(hours=14, minutes=30): 440,\n    timedelta(hours=16, minutes=30): 490,\n    timedelta(hours=18, minutes=30): 710,\n    timedelta(hours=18, minutes=30): 710,\n    timedelta(hours=19, minutes=20): 705,\n    timedelta(hours=21): 640,\n    timedelta(hours=22, minutes=30): 540,\n}\ndaily_seasonality = DailySeasonality(constraints)\n\n# quick plotting on 2 days\ndaily_seasonality.preview_day(num_days=2, start_time=datetime(2021, 1, 1))\n')),(0,s.kt)("p",null,(0,s.kt)("img",{alt:"png",src:a(1897).Z})),(0,s.kt)("p",null,"That's it ! ",(0,s.kt)("a",{parentName:"p",href:"../API%20Reference/mockseries/seasonality/weekly_seasonality"},"WeeklySeasonality")," and ",(0,s.kt)("a",{parentName:"p",href:"../API%20Reference/mockseries/seasonality/yearly_seasonality"},"YearlySeasonality")," work the same way, the 3 signals are subclasses of the ",(0,s.kt)("a",{parentName:"p",href:"../API%20Reference/mockseries/seasonality/period_seasonality"},"PeriodSeasonality"),".\nBut don't leave just yet! We still have important features to explore.  "),(0,s.kt)("h2",{id:"weekly-seasonality---managing-timezone"},"Weekly seasonality - Managing timezone"),(0,s.kt)("p",null,"Let's imagine the weekly traffic of an american social network: "),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},"the app has almost no users at night"),(0,s.kt)("li",{parentName:"ul"},"the app has many users around 7pm, except on Saturday and Sunday and ")),(0,s.kt)("p",null,"Let's use ",(0,s.kt)("a",{parentName:"p",href:"../API%20Reference/mockseries/seasonality/weekly_seasonality"},"WeeklySeasonality")," to get this:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-python"},'plt.rcParams["figure.figsize"] = LARGE_SIZE_PLOT\nfrom mockseries.seasonality import WeeklySeasonality\n\nconstraints =  {\n    timedelta(hours=3): 10,            ### EARLY MONDAY\n    timedelta(days=1, hours=3): 10,    ### EARLY TUESDAY\n    timedelta(days=2, hours=3): 10,    ### EARLY WEDNESDAY\n    timedelta(days=3, hours=3): 10,    ### EARLY THURSDAY\n    timedelta(days=4, hours=3): 10,    ### EARLY FRIDAY\n    timedelta(days=5, hours=3): 10,    ### EARLY SATURDAY\n    timedelta(days=6, hours=3): 10,    ### EARLY SUNDAY\n    timedelta(hours=19): 1000,         ### MONDAY EVENING\n    timedelta(days=1, hours=19): 1000, ### TUESDAY EVENING\n    timedelta(days=2, hours=19): 1000, ### WEDNESDAY EVENING\n    timedelta(days=3, hours=19): 1000, ### THURSDAY EVENING\n    timedelta(days=4, hours=19): 1000, ### FRIDAY EVENING\n    timedelta(days=5, hours=19): 100,  ### SATURDAY EVENING\n    timedelta(days=6, hours=19): 100,  ### SUNDAY EVENING\n}\nweekly_seasonality = WeeklySeasonality(constraints)\nweekly_seasonality.preview_week(num_weeks=2, start_time=datetime(2021, 8, 23))\n')),(0,s.kt)("p",null,(0,s.kt)("img",{alt:"png",src:a(5664).Z})),(0,s.kt)("p",null,"Looks nice, but there's one problem. The social network is ",(0,s.kt)("em",{parentName:"p"},"american"),", straight from the Silicon Valley ! All times were given with PDT timezone in mind.",(0,s.kt)("br",{parentName:"p"}),"\n","It's easy to do this in ",(0,s.kt)("strong",{parentName:"p"},"mockseries"),": just pass the UTC offset of the timezone.\nFor instance: PDT is UTC-7: just pass an ",(0,s.kt)("inlineCode",{parentName:"p"},"utc_offset")," of `-7 hours."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-python"},'from mockseries.utils.dates import datetime_range\nfrom mockseries.utils.plot import plot_timeseries\n\nPDT_OFFSET = timedelta(hours=-7) \nweekly_seasonality = WeeklySeasonality(constraints)\nweekly_seasonality_with_pdt_offset = WeeklySeasonality(constraints, utc_offset=PDT_OFFSET)\n\nts_index = datetime_range(\n    granularity=timedelta(hours=1),\n    start_time=datetime(2021, 8, 23),\n    end_time=datetime(2021, 8, 23) + timedelta(days=7),\n)\n\nplot_timeseries(\n    ts_index,\n    [\n        weekly_seasonality.generate(ts_index),\n        weekly_seasonality_with_pdt_offset.generate(ts_index)\n     ],\n    titles=["UTC timezone", "PDT timezone"]\n)\n\n')),(0,s.kt)("p",null,(0,s.kt)("img",{alt:"png",src:a(2749).Z})),(0,s.kt)("p",null,"That's it! You can see the red curve corresponds to the PDT times.",(0,s.kt)("br",{parentName:"p"}),"\n","Of course this also works with the other seasonalities presented in this tutorial.    "),(0,s.kt)("h2",{id:"yearly-seasonality---normalizing"},"Yearly seasonality - Normalizing"),(0,s.kt)("p",null,"Let's have a look at the ",(0,s.kt)("a",{parentName:"p",href:"https://climateknowledgeportal.worldbank.org/sites/default/files/2021-06/15847-WB_Croatia%20Country%20Profile-WEB_0.pdf"},"Historical monthly average temperature in Croatia")," from the World Bank Group."),(0,s.kt)("p",null,(0,s.kt)("img",{alt:"yearly temperature seasonality",src:a(9997).Z})),(0,s.kt)("p",null,"We have our pattern. It sounds reasonable to use the middle of a month to represent the average value of a month.\nFor instance:"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},"January: ",(0,s.kt)("inlineCode",{parentName:"li"},"timedelta(days=15)")),(0,s.kt)("li",{parentName:"ul"},"February: ",(0,s.kt)("inlineCode",{parentName:"li"},"timedelta(days=46)")),(0,s.kt)("li",{parentName:"ul"},"October: ",(0,s.kt)("inlineCode",{parentName:"li"},"timedelta(days=288)"),".")),(0,s.kt)("p",null,"Not easy to compute mentally, right ? Don't worry, middle-of-month timedeltas are available in the utils.\nAlso, because we're lazy, we won't fill the 12 months and let the interpolation generate a realistic curve."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-python"},'plt.rcParams["figure.figsize"] = DEFAULT_SIZE_PLOT\nfrom mockseries.seasonality import YearlySeasonality\nfrom mockseries.utils.timedeltas import JANUARY, MARCH, JUNE, JULY, AUGUST, SEPTEMBER, OCTOBER, DECEMBER\n\nconstraints = {\n        JANUARY: 1.3,\n        MARCH: 6.9,\n        JUNE: 20.1,\n        JULY: 21.9,\n        AUGUST: 21.8,\n        SEPTEMBER: 17.1,\n        OCTOBER: 12,\n        DECEMBER: 2.7,\n    }\nyearly_seasonality = YearlySeasonality(constraints)\n\nyearly_seasonality.preview_year(start_time=datetime(2021, 1, 1))\n')),(0,s.kt)("p",null,(0,s.kt)("img",{alt:"png",src:a(2691).Z})),(0,s.kt)("p",null,"Repeating on multiple years:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-python"},'import matplotlib.pyplot as plt\nplt.rcParams["figure.figsize"] = LARGE_SIZE_PLOT\n\nyearly_seasonality.preview_year(num_years=12, start_time=datetime(2010, 1, 1))\n')),(0,s.kt)("p",null,(0,s.kt)("img",{alt:"png",src:a(9041).Z})),(0,s.kt)("p",null,"That's nice, but let's make this more realistic now.\nLook at the temperature trend:\n",(0,s.kt)("img",{alt:"yearly temperature seasonality",src:a(2577).Z}),"\nIn 1980 temperature averaged 10.4 degrees. It was 12.6 in 2020.\nWe can roughly estimate that Croatia temperature follows a linear trend, raising by ",(0,s.kt)("inlineCode",{parentName:"p"},"(12.6-10.4)/10.4")," --\x3e ",(0,s.kt)("inlineCode",{parentName:"p"},"21.1%")," in 40 years.\nSomething like:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-python"},"from mockseries.trend import LinearTrend\n\nWARMING_COEFFICIENT = 1  + 0.211\nPERIOD_YEARS = 40\ntrend = LinearTrend(coefficient=WARMING_COEFFICIENT,\n                    time_unit=timedelta(days=365.25*PERIOD_YEARS),\n                    )\n\n# generate and plot\ntrend.preview_year(num_years=40, start_time=datetime(1980, 1, 1))\n")),(0,s.kt)("p",null,(0,s.kt)("img",{alt:"png",src:a(9079).Z})),(0,s.kt)("p",null,"Let's combine this with our seasonality ! ... but how should we do this ?\nOur ",(0,s.kt)("a",{parentName:"p",href:"../API%20Reference/mockseries/seasonality/yearly_seasonality"},"YearlySeasonality")," is based on ",(0,s.kt)("em",{parentName:"p"},"average")," temperatures between 1990 and 2020.\nWe would have to somehow estimate the true values in 1990, and then estimate the values in 1980.\nIt's feasible with our linear trend  approximation, but  it's error prone."),(0,s.kt)("p",null,"Remember the ",(0,s.kt)("a",{parentName:"p",href:"./interaction-scalar-operations"},"two types of interactions")," ?\nA simple way to get around this is to use ",(0,s.kt)("inlineCode",{parentName:"p"},"normalize")," in our ",(0,s.kt)("a",{parentName:"p",href:"../API%20Reference/mockseries/seasonality/yearly_seasonality"},"YearlySeasonality"),".\n",(0,s.kt)("inlineCode",{parentName:"p"},"normalize")," transform constraints to a multiplication factor for easy use in multiplicative interactions.\nLet's check it out:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-python"},'normalized_yearly_seasonality = YearlySeasonality(constraints, normalize=True)\n\nplt.rcParams["figure.figsize"] = DEFAULT_SIZE_PLOT\nnormalized_yearly_seasonality.preview_year(start_time=datetime(2010, 1, 1))\n')),(0,s.kt)("p",null,(0,s.kt)("img",{alt:"png",src:a(175).Z})),(0,s.kt)("p",null,"Same curve, different scale."),(0,s.kt)("p",null,"Now it's easy to combine everything: we generate the base value, multiply it by our seasonality and add the trend.\nAlso, let's add a bit of noise to make this more realistic."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-python"},'from mockseries.noise import RedNoise\n\nnoise = RedNoise(0,1)\n\n#  combine signals - 10.4 is the value in 1980\ntimeseries = 10.4 * normalized_yearly_seasonality + trend + noise\n\n\n# generate and plot for 20 years\nplt.rcParams["figure.figsize"] = LARGE_SIZE_PLOT\ntimeseries.preview_year(num_years=50, start_time=datetime(1980, 1, 1))\n')),(0,s.kt)("p",null,(0,s.kt)("img",{alt:"png",src:a(8507).Z})),(0,s.kt)("p",null,"Here you are: a simple temperature timeseries for Croatia.",(0,s.kt)("br",{parentName:"p"}),"\n","To go further, try to implement some improvements:"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},"Add the temperature's daily seasonality."),(0,s.kt)("li",{parentName:"ul"},"Make the ",(0,s.kt)("a",{parentName:"li",href:"../API%20Reference/mockseries/seasonality/yearly_seasonality"},"YearlySeasonality")," multiplicative with the trend."),(0,s.kt)("li",{parentName:"ul"},"Make the trend non linear, exponential maybe.")),(0,s.kt)("p",null,"Go to the next page to learn how to create switches, and point in time events.",(0,s.kt)("br",{parentName:"p"}),"\n","Go directly to the ",(0,s.kt)("a",{parentName:"p",href:"../API%20Reference/mockseries/seasonality/period_seasonality"},"PeriodSeasonality's API Reference")," to see how to extend the PeriodSeasonality for your own custom period."))}y.isMDXComponent=!0},5428:function(e,t,a){t.Z=a.p+"assets/images/hourly-energy-consumption-per-household-b6544a5a3cfdd32b95c9aa33aea13550.png"},9997:function(e,t,a){t.Z=a.p+"assets/images/yearly-temperatures-seasonality-00fef510c99b371d4c55428a950194f6.png"},2577:function(e,t,a){t.Z=a.p+"assets/images/yearly-trend-265b754b3ed2b1d78ec896e30e417313.png"},2691:function(e,t,a){t.Z=a.p+"assets/images/seasonality-daily-weekly-yearly_10_0-d3ec3199af88e3a3d7623dbaec469c17.png"},9041:function(e,t,a){t.Z=a.p+"assets/images/seasonality-daily-weekly-yearly_12_0-7188d65f5cb7c7f582657fb2f56a3e1c.png"},9079:function(e,t,a){t.Z=a.p+"assets/images/seasonality-daily-weekly-yearly_14_0-900db55a254029a1eafc93618659bce5.png"},175:function(e,t,a){t.Z=a.p+"assets/images/seasonality-daily-weekly-yearly_16_0-2916cd79d2f410a5f001f244cbf340e2.png"},8507:function(e,t,a){t.Z=a.p+"assets/images/seasonality-daily-weekly-yearly_18_0-d2bec26ba8523cea55f5666b28aceb34.png"},1897:function(e,t,a){t.Z=a.p+"assets/images/seasonality-daily-weekly-yearly_2_0-ace01968e58d15a94e46903d4dbb6d06.png"},5664:function(e,t,a){t.Z=a.p+"assets/images/seasonality-daily-weekly-yearly_5_0-2fd309a8584ec1a618dea12236704d2b.png"},2749:function(e,t,a){t.Z=a.p+"assets/images/seasonality-daily-weekly-yearly_7_0-90f28a6d9c40428298a836fe015132a7.png"}}]);